Given a sorted array arr[] of size N without duplicates, and given a value x. Find the floor of x in given array. Floor of x is defined as the largest element K in arr[] such that K is smaller than or equal to x.

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains number of elements in the array and element whose floor is to be searched. Last line of input contains array elements.

Output:
Output the index of floor of x if exists, else print -1.

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 107
1 ≤ arr[i] ≤ 1018
0 ≤ X ≤ arr[n-1]

Example:
Input:
3
7 0
1 2 8 10 11 12 19
7 5
1 2 8 10 11 12 19
7 10
1 2 8 10 11 12 19

Output:
-1
1
3

CODE:
#include <iostream>
using namespace std;

int floorSearch(int arr[], int low, 
                int high, int x) 
{ 
    // If low and high cross each other 
    if (low > high) 
        return -1; 
  
    // If last element is smaller than x 
    if (x >= arr[high]) 
        return high; 
  
    // Find the middle point 
    int mid = (low + high) / 2; 
  
    // If middle point is floor. 
    if (arr[mid] == x) 
        return mid; 
  
    // If x lies between mid-1 and mid 
    if (mid > 0 && arr[mid - 1] <= x 
        && x < arr[mid]) 
        return mid - 1; 
  
    // If x is smaller than mid, floor 
    // must be in left half. 
    if (x < arr[mid]) 
        return floorSearch( 
            arr, low, mid - 1, x); 
  
    // If mid-1 is not floor and x is 
    // greater than arr[mid], 
    return floorSearch(arr, mid + 1, high, x); 
} 
int main() {
    
    int t;
    cin>>t;
    while(t--)
    {
        int d,k;
        cin>>d>>k;
        int a[d];
        for(int i=0;i<d;i++)
        {
            cin>>a[i];
        }
        int l=0,h=d-1;
        int ans=floorSearch(a,l,h,k);
        cout<<ans<<"\n";
    }
	return 0;
}
