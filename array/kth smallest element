void swap(int &a,int &b)
{
    int temp=a;
    a=b;
    b=temp;
}

int partition(int a[],int l,int h)
{
    // Partitioning around a random element to have the amortized time complexity O(n).

    int n = h-l+1;
    int p = rand() % n;
    swap(a[l + p], a[h]);
    
    int pivot=a[h];
    int i=l-1;
    for(int j=l;j<=h-1;j++)
    {
        if(a[j]<pivot)
        {
            i++;
            swap(a[i],a[j]);
        }
    }
    swap(a[i+1],a[h]);
    return i+1;
}
int kthSmallest(int arr[], int l, int r, int k) {
    
    
    int p=partition(arr,l,r);
    if(p+1==k)
    {
        return arr[p];
    }
    else
    if(p+1<k)
    {
        return kthSmallest(arr,p+1,r,k);
    }
    else
    {
        return kthSmallest(arr,l,p-1,k);
    }
}


hashing:

int kthSmallest(int arr[], int l, int r, int k) {
int i;

int h[100001]={0};

for(i=l;i<=r;i++)
h[arr[i]]++;

int count = 0;

for(i=0;i<100001;i++)
{
if(h[i]>0)
count++;

if(count==k)
return i;
}
}
