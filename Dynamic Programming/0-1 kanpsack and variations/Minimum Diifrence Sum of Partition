int subsetsum(int arr[], int n,int sum)
	{
	    int t[n+1][sum+1];
	    
	    for(int i=0;i<n+1;i++)
	    {
	        for(int j=0;j<sum+1;j++)
	        {
	            if(i==0)
	            {
	                t[i][j]=0;
	            }
	            if(j==0)
	            {
	                t[i][j]=1;
	            }
	        }
	    }
	    
	    
	    for(int i=1;i<n+1;i++)
	    {
	        for(int j=1;j<sum+1;j++)
	        {
	            if(arr[i-1]<=j)
	            {
	                t[i][j]=t[i-1][j-arr[i-1]] || t[i-1][j];
	            }
	            else
	            {
	                t[i][j]=t[i-1][j];
	            }
	        }
	    }
	    
	    vector<int> ans;
	    
	    for(int i=n;i<n+1;i++)
	    {
	        for(int j=0;j<sum+1;j++)
	        {
	            if(t[i][j]==1)
	            {   
	                if(j<=sum/2)
	                {
	                ans.push_back(j);
	                }
	                
	            }
	        }
	    }
	    
	    int mn=INT_MAX;
	    
	    for(int i=0;i<ans.size();i++)
	    {
	        {
	            mn=min(mn,sum-(2*ans[i]));
	        }
	    }
	    
	    return mn;
	}
	int minDiffernce(int arr[], int n) 
	{ 
	    int range=0;
	    for(int i=0;i<n;i++)
	    {
	        range+=arr[i];
	    }
	    return subsetsum(arr,n,range);
	} 
