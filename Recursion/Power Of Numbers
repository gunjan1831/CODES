
long long modfun(long long n, long long R)
{
    // Base cases 
    if (n == 0) 
        return 0; 
    if (R == 0)  //power zero mean answer is 1
        return 1; 
  
    // If R is even 
    long long y; 
    if (R % 2 == 0) { 
        y = modfun(n, R/2);  //finding r/2 power as power is even then storing answer in y and---
        y = (y * y) % mod; //---if power is even like 2^4 we can simply do (2^2)*(2^2)
    } 
  
    // If R is odd 
    else { 
        y = n % mod;  //if power is odd then ---
        y = (y * modfun(n, R - 1) % mod) % mod; //--- reduce the power by 1 to make it even. The reducing power
        //by one can be done if we take one n out. Like 2^3 can be written as 2*(2^2)
    } 
  
    return ((y + mod) % mod);  //finally return the answer (y+mod)%mod = (y%mod+mod%mod)%mod = (y%mod)%mod
}


or


long long power(int N,int R)
{
   //Your code here
   if(R==0)
return 1;

else if(R==1)
return N;

return N%1000000007 * (power( N, R-1))%1000000007 ;
}
